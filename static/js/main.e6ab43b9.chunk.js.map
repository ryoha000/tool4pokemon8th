{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","props","handleUserName","event","userName","target","value","setState","username","onKeyDown","e","keyCode","loading","axios","post","name","state","pass","password","then","res","pokeInit","myPokemons","data","pokemons","partyInit","myParties","parties","logInit","myLogs","logs","catch","alert","response","message","confirmPass","handlePassWord","passWord","handleConfirmPass","clickGoSignup","login","signup","clickGoLogin","clickLogin","checkSignup","clickSignup","handleAllData","datas","length","effort_h","pokemon_1_id","pokemon_num_1","wazas","Paper","style","height","width","Card","CardHeader","title","CardContent","TextField","label","this","onChange","margin","type","autoComplete","CardActions","Fab","variant","size","color","onClick","disabled","Button","className","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e6ab43b9.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport ParentTabs from './components/ParentTabs'\r\nimport { PokemonData, waza, MyPokemon, MyParty, MyLog } from './components/shared'\r\nimport { Grid, Paper, Card, CardHeader, Button, Icon, TextField, Typography, Fab, CardContent, CardActions } from '@material-ui/core';\r\nimport axios from 'axios'\r\nimport NavigationIcon from '@material-ui/icons/Navigation';\r\n\r\ninterface Props{\r\n}\r\n  \r\ninterface State {\r\n  pokemons: PokemonData[];\r\n  wazas: waza[];\r\n  username: string;\r\n  password: string;\r\n  confirmPass: string;\r\n  login: boolean;\r\n  signup: boolean;\r\n  pokeInit: boolean;\r\n  partyInit: boolean;\r\n  logInit:boolean;\r\n  loading: boolean;\r\n  myPokemons: MyPokemon[]\r\n  myParties: MyParty[]\r\n  myLogs: MyLog[]\r\n}\r\n\r\nexport default class App extends React.Component<Props,State>{\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      pokemons: [],\r\n      wazas: [],\r\n      login: true,\r\n      signup: false,\r\n      username: '',\r\n      password: '',\r\n      confirmPass: '',\r\n      pokeInit: false,\r\n      partyInit: false,\r\n      logInit: false,\r\n      loading: false,\r\n      myLogs: [],\r\n      myParties: [],\r\n      myPokemons: []\r\n    };\r\n  }\r\n  // componentDidMount = () => {\r\n  //   this.setState({username: 'username', password: 'password', pokeInit: true, partyInit: true, logInit: true})\r\n  // }\r\n  handleUserName = () => (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n    const userName: string = event.target.value\r\n    this.setState({username: userName})\r\n  }\r\n  onKeyDown = (e: React.KeyboardEvent<HTMLDivElement>) => {\r\n    if (e.keyCode === 13) {\r\n      this.setState({loading: true})\r\n      axios.post('https://us-central1-tool4pokemon8th.cloudfunctions.net/user?login', {name: this.state.username, pass: this.state.password})\r\n        .then(() => {\r\n          axios.post('https://us-central1-tool4pokemon8th.cloudfunctions.net/pokemon', {name: this.state.username, pass: this.state.password})\r\n            .then((res) => this.setState({pokeInit: true, myPokemons: res.data.pokemons}))\r\n          axios.post('https://us-central1-tool4pokemon8th.cloudfunctions.net/party', {name: this.state.username, pass: this.state.password})\r\n            .then((res) => this.setState({partyInit: true, myParties: res.data.parties}))\r\n          axios.post('https://us-central1-tool4pokemon8th.cloudfunctions.net/log', {name: this.state.username, pass: this.state.password})\r\n            .then((res) => this.setState({logInit: true, myLogs: res.data.logs}))\r\n        })\r\n        .catch((e: any) => {\r\n          if (e.data) {\r\n            alert(e.response.data.message)\r\n          }\r\n          this.setState({loading: false, username: '', password: '', confirmPass: ''})\r\n      })\r\n    }\r\n  }\r\n  handlePassWord = () => (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n    const passWord: string = event.target.value\r\n    this.setState({password: passWord})\r\n  }\r\n  handleConfirmPass = () => (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n    if (!this.state.password) {\r\n      return\r\n    }\r\n    const passWord: string = event.target.value\r\n    this.setState({confirmPass: passWord})\r\n  }\r\n  clickGoSignup = () => () => {\r\n    this.setState({login: false, signup: true, password: '', username: '', confirmPass: ''})\r\n  }\r\n  clickGoLogin = () => () => {\r\n    this.setState({login: true, signup: false, password: '', username: '', confirmPass: ''})\r\n  }\r\n  clickLogin = () => () => {\r\n    this.setState({loading: true})\r\n    axios.post('https://us-central1-tool4pokemon8th.cloudfunctions.net/user?login', {name: this.state.username, pass: this.state.password})\r\n      .then(() => {\r\n        axios.post('https://us-central1-tool4pokemon8th.cloudfunctions.net/pokemon', {name: this.state.username, pass: this.state.password})\r\n          .then((res) => this.setState({pokeInit: true, myPokemons: res.data.pokemons}))\r\n        axios.post('https://us-central1-tool4pokemon8th.cloudfunctions.net/party', {name: this.state.username, pass: this.state.password})\r\n          .then((res) => this.setState({partyInit: true, myParties: res.data.parties}))\r\n        axios.post('https://us-central1-tool4pokemon8th.cloudfunctions.net/log', {name: this.state.username, pass: this.state.password})\r\n          .then((res) => this.setState({logInit: true, myLogs: res.data.logs}))\r\n      })\r\n      .catch((e: any) => {\r\n        if (e.data) {\r\n          alert(e.response.data.message)\r\n        }\r\n        this.setState({loading: false, username: '', password: '', confirmPass: ''})\r\n      })\r\n  }\r\n  checkSignup = () => {\r\n    if (this.state.loading) {\r\n      return false\r\n    }\r\n    if (this.state.password === this.state.confirmPass) {\r\n      if (this.state.username !== '' && this.state.password !== '') {\r\n        return true\r\n      }\r\n    }\r\n    return false\r\n  }\r\n  clickSignup = () => () => {\r\n    this.setState({loading: true})\r\n    axios.post('https://us-central1-tool4pokemon8th.cloudfunctions.net/user?signup', {name: this.state.username, pass: this.state.password})\r\n      .then(() => {\r\n         this.setState({pokeInit: true, partyInit: true,logInit: true, loading: false})\r\n      })\r\n      .catch((e) => {\r\n        alert(\"同名のユーザーが既に存在します\")\r\n        this.setState({loading: false, username: '', password: '', confirmPass: ''})\r\n      })\r\n  }\r\n  handleAllData = (datas: any) => {\r\n    if (datas.length> 0) {\r\n      if (typeof datas[0].effort_h === 'number') {\r\n        this.setState({myPokemons: datas})\r\n      }\r\n      if (typeof datas[0].pokemon_1_id === 'number') {\r\n        this.setState({myParties: datas})\r\n      }\r\n      if (typeof datas[0].pokemon_num_1 === 'string') {\r\n        this.setState({myLogs: datas})\r\n      }\r\n    }\r\n  }\r\n  renderLogin() {\r\n    return (\r\n      <Paper style={{ height: 430,width: 300 }}>\r\n        <Card style={{ height: 430, width: 300 }}>\r\n          <CardHeader\r\n            title='Login'\r\n            style={{height: 26}}\r\n          />\r\n          <CardContent>\r\n            <TextField\r\n              label=\"Name\"\r\n              value={this.state.username}\r\n              onChange={this.handleUserName()}\r\n              margin=\"normal\"\r\n            />\r\n            <TextField\r\n              label=\"Password\"\r\n              type=\"password\"\r\n              value={this.state.password}\r\n              onChange={this.handlePassWord()}\r\n              onKeyDown={(e: React.KeyboardEvent<HTMLDivElement>) => this.onKeyDown(e)}\r\n              autoComplete=\"current-password\"\r\n              margin=\"normal\"\r\n            />\r\n          </CardContent>\r\n          <CardActions>\r\n            <Fab\r\n              variant=\"extended\"\r\n              size=\"small\"\r\n              color=\"primary\"\r\n              onClick={this.clickLogin()}\r\n              disabled={!this.state.username || !this.state.password || this.state.loading}\r\n            >\r\n              <NavigationIcon/>\r\n              Login\r\n            </Fab>\r\n          </CardActions>\r\n          <CardActions>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={this.clickGoSignup()}\r\n            >\r\n              未登録の方はこちら\r\n            </Button>\r\n          </CardActions>\r\n        </Card>\r\n      </Paper>\r\n    )\r\n  }\r\n  renderSignup() {\r\n    return (\r\n      <Paper style={{ height: 430,width: 300 }}>\r\n        <Card style={{ height: 430, width: 300 }}>\r\n          <CardHeader\r\n            title='Signup'\r\n            style={{height: 26}}\r\n          />\r\n          <CardContent>\r\n            <TextField\r\n              label=\"Name\"\r\n              value={this.state.username}\r\n              onChange={this.handleUserName()}\r\n              margin=\"normal\"\r\n            />\r\n            <TextField\r\n              label=\"Password\"\r\n              type=\"password\"\r\n              value={this.state.password}\r\n              onChange={this.handlePassWord()}\r\n              autoComplete=\"current-password\"\r\n              margin=\"normal\"\r\n            />\r\n            <TextField\r\n              label=\"Confirm Password\"\r\n              type=\"password\"\r\n              value={this.state.confirmPass}\r\n              onChange={this.handleConfirmPass()}\r\n              autoComplete=\"current-password\"\r\n              margin=\"normal\"\r\n            />\r\n          </CardContent>\r\n          <CardActions>\r\n            <Fab\r\n              variant=\"extended\"\r\n              size=\"small\"\r\n              color=\"primary\"\r\n              onClick={this.clickSignup()}\r\n              disabled={!this.checkSignup()}\r\n            >\r\n              <NavigationIcon/>\r\n              Signup\r\n            </Fab>\r\n          </CardActions>\r\n          <CardActions>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={this.clickGoLogin()}\r\n            >\r\n              登録済の方はこちら\r\n            </Button>\r\n          </CardActions>\r\n        </Card>\r\n      </Paper>\r\n    )\r\n  }\r\n  render() {\r\n    // if (!this.state.pokeInit || !this.state.partyInit || !this.state.logInit) {\r\n    //   if (this.state.login) {\r\n    //     return (\r\n    //       <Grid container>\r\n    //         <Grid item xs={12}>\r\n    //           <Grid container justify=\"center\">\r\n    //             <Grid item>\r\n    //               {this.renderLogin()}\r\n    //             </Grid>\r\n    //           </Grid>\r\n    //         </Grid>\r\n    //       </Grid>\r\n    //     )\r\n    //   }\r\n    //   if (this.state.signup) {\r\n    //     return (\r\n    //       <Grid container>\r\n    //         <Grid item xs={12}>\r\n    //           <Grid container justify=\"center\">\r\n    //             <Grid item>\r\n    //             {this.renderSignup()}\r\n    //             </Grid>\r\n    //           </Grid>\r\n    //         </Grid>\r\n    //       </Grid>\r\n    //     )\r\n    //   }\r\n    // } else {\r\n      return (\r\n        <div className=\"App\">\r\n          {/* <ParentTabs\r\n            pokemons={this.state.pokemons}\r\n            wazas={this.state.wazas}\r\n            username={this.state.username}\r\n            password={this.state.password}\r\n            myPokemons={this.state.myPokemons}\r\n            myParties={this.state.myParties}\r\n            myLogs={this.state.myLogs}\r\n            handleAllData={this.handleAllData}\r\n          /> */}\r\n          現在ちょっと鯖代がやばくてとめてます＞＜\r\n          データベースを置く場所を変えたら大分安くなるので移したら再開します\r\n        </div>\r\n      )\r\n    // }\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}